{"version":3,"file":"scripts/game.js","sources":["src/cards.coffee","src/drawing.coffee","src/game.coffee"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;CAAA,GACE,QADF;CACE;CAAA,CACA;CADA,CAEA;CAHF;CAKA,CALA,CAOE,CAFe,WAAjB;CAWA,CAhBA,EAgBa,OAAb;CAAiB,QAAD;CAAH;CACb,CAjBA,EAiBa,OAAb;CAAiB,CAAoB,IAArB;CAAH;CAEb,CAnBA,EAmBY,KAAM,CAAlB;SACE;CAAA,CAAO,EAAP;CAAA,CACQ,EAAR,OAAmB;CAFH;CAAA;CAIlB,CAvBA,EAuBW,CAAQ,CAAR,GAAX,CAAoB;CAAU,CAAM,EAAP;CAAV;CACnB,CAxBA,CAwBgC,CAApB,MAAZ;CAEA,CA1BA,EA0BwB,kBAAxB;CAAgC,EAAsB,CAAvB,CAAJ,CAAW,GAAX;CAAH;CACxB,CA3BA,EA2Bc,QAAd,UAAc;CAEd,CA7BA,CA6BiC,CAAvB,IAAV,EAAU;CAIV,CAjCA,EAiCiB,GAAX,CAAN;CAAiB,CACf,SADe;CAAA,CAEf,KAFe;CAjCjB;;;ACAA;CAAA,EAAmB,CAAJ,MAAC,GAAhB;CACG,EAAe,CAAf;CADY;CAGf,CAHA,CAGoB,CAAP,MAAC,CAAd;CACQ,CAAgB,EAAI,CAA1B,OAAM;CADK;CAKb,CARA,EAQa,MAAC,CAAd;CACQ,IAAD,GAAL;CADW;CAGb,CAXA,CAWgD,CAAnC,IAAa,GAA1B;CAEA,CAbA,EAaiB,GAAX,CAAN;CAAiB,CAGf,QAHe;CAbjB;;;ACAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,C,CAAA;CAkDA,CAlDA,EAkDQ,EAAR,EAAQ;CACR,CAnDA,EAmDU,IAAV,IAAU;CAEV,CArDA,EAqDO,CAAP,CAAY,EAAL;CAEP,CAvDA,CAuDwC,CAArB,EAAa,IAAC,CAAd,MAAnB;CACQ,CAAkB,EAAuB,CAA1C,CAA4B,CAAjC;CAD8B;CAGhC,CA1DA,EA0DS,GAAT,GAAU;CAAM,EAAI,MAAJ;CAAP;CAIT,CA9DA,EA8DM,EAAN,IAAM;CACJ;CAAA,EAAS,GAAT,CAAgB,GAAP;CAAT,CACA,CAAa,OAAb,MAAa;CADb,CAGA,CAAY,EAAK,EACT,EADR,CAAY;CAER,IAAqB,CAAlB,CAAO;CACP,IAAD;MADF;CAGG,CAAe,GAAhB;KAJE;CADI,CAMR,CALI,IAKJ,EAEG;CAAA,UAAG;CAFN,EAEG;CAXP,CAaA,CAAgB,MAAC,IAAjB;CACa,EAEA,CAFX,KAEW,CAFA,CAAX;CAEqB,EAAsB,CAA7B,EAAM,GAAuB,IAA7B;CAA8C,YAAd;CAAhC,EAA4D,IAA/B,EAA+B,CAA5D;CAA4D,cAAE;CAA9D,MAA4D;CAF1E,EAGc,EADH,IACG,CAHd;CAGc,YAAE;CAHhB,IAGc;CAjBhB,EAagB;CAbhB,CAoBA,CAAc,QAAd,EAAc;CApBd,CAqBA,CAAc,QAAd,EAAc;CArBd,CAsBA,CAAc,QAAd,EAAc;CAGJ,EAAV;CA1BI","sourcesContent":["CARD_STATES =\n  HIDDEN: 0\n  FLIPPED: 1\n  MATCHED: 2\n\navailableCards = [\n  \"eating\"\n  \"playing\"\n  \"cleaning\"\n  \"cooking\"\n  \"reading\"\n  \"walking\"\n]\n\n# could be modified as a filter for specific sets of cards\n# currently returns all available cards\ncardFilter = -> R.T\ngetCardSet = -> R.filter cardFilter, availableCards\n\nbuildCard = R.map (cardType) ->\n  image: cardType\n  status: CARD_STATES.HIDDEN\n\nmakePair = R.chain (item) -> [item, item]\nbuildDeck = R.compose(makePair, buildCard)\n\nrandomOrderComparator = -> Math.floor(Math.random() * 3) - 1\nshuffleDeck = R.sort randomOrderComparator\n\ngetDeck = R.compose(shuffleDeck, buildDeck, getCardSet)\n\n\n\nmodule.exports = {\n  CARD_STATES\n  getDeck\n}\n","cardTemplate = (i, image) ->\n  \"<div id='card-#{i}' class='card face-down #{image}'>#{image}</div>\"\n\nrenderCard = (card, i) ->\n  Zepto(cardTemplate(i, card.image))\n\n# Note, Zepto wont be ready when this function is defined, so\n# it cant be partially appplied here\nplaceInDOM = ($card) ->\n  $card.appendTo Zepto(\"#cards\")\n\nrenderDeck = R.mapIndexed R.compose(placeInDOM, renderCard)\n\nmodule.exports = {\n  # takes an array of card definitions (deck)\n  # returns array of card views in same order\n  renderDeck\n}\n","###\nGAME FLOW\n\nStreams (cards 2 and 3 match)\ncard1 clicks   ---1----------------------\ncard2 clicks   ------2-------------2-----\ncard3 clicks   ------------3--3----------\nflips          0--1--2-----3-------4-----\nrounds         0--1--------2-------------\nmatch          ------f-------------t-----\nupdate cards   f-------f-------------t---\ncard1 status   d--u----d-----------------\ncard2 status   d-----u-d-----------u-m---\ncard3 status   d-----------u---------m---\n\nCard status:\nd = face down\nu = face up\nm = matched\n\nStream rules / definitions:\n\nFlip stream:\n- you can't flip the same card twice in a row if the round hasn't changed\n  - but round is defined by flips :(\n- or: you can't flip the same card twice in a row if its connected value is face up\n  - but that's the same as counting flips through card value changes to face up\n\nMatch stream:\n- buffer card status until round end (every 2 flips)\n- do the images match?\n\nUpdate cards stream:\n- pass match value on after a 2 second delay\n\nCard value:\n- start face down\n- respond to matching card click stream once, turning face up\n- after turning face up, respond to update cards stream - go face down if false, matched if true\n- after turning face down, listen to matching card click stream again\n- only respond do clicks when play is active (between \"update cards\" and \"match\" events)\n\n- ignore clicks when value is face up, ignore resets when value is face down\n\nSide effects from each card value stream:\n- on a card going face up, render card's image\n- on a card going face down, render card's back\n- on a card going matched, remove from grid\n\n###\ncards = require \"./cards\"\ndrawing = require \"./drawing\"\n\ndeck = cards.getDeck()\n\nmakeClickStreams = R.mapIndexed ($card, i) ->\n  Kefir.fromEvents($card, \"click\", R.always deck[i])\n\nisEven = (n) -> n % 2\n\n\n# on document ready\nZepto ->\n  $cards = drawing.renderDeck deck\n  cardClicks = makeClickStreams $cards\n\n  validFlip = Kefir.merge(cardClicks)\n    .scan (faceUps, event) ->\n      if faceUps.length is 2\n        [event]\n      else\n        R.append event, faceUps\n    , []\n    .changes()\n    .map -> \"asdf\"\n\n  getCardStream = (i) ->\n    cardClicks[i]\n      .take(1)\n      .flatMap(-> rounds.take(2).flatMapLatest(-> getCardStream i).toProperty(->\"asdfas\"))\n      .toProperty(->'test')\n\n\n  card1Stream = getCardStream 0\n  card2Stream = getCardStream 1\n  card3Stream = getCardStream 2\n\n\n  validFlip.log(\"valid?\")\n  # rounds.skip(1).log(\"round =====================\")\n  # flips.skip(1).log(\"flip ----------\")\n  # card1Stream.log(\"card 1\")\n  # card2Stream.log(\"card 2\")\n  # card3Stream.log(\"card 3\")\n"]}